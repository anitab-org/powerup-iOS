import XCTest

@testable import Powerup

class PopupEventPlayerUnitTests: XCTestCase {

    override func setUp() {
        super.setUp()
    }

    override func tearDown() {
        super.tearDown()
    }

    /**
     Test all steps described in PopupEvents() to ensure there are no errors in the dataset. The dataset is being generated by parsing Popups.json. This allows the same data file to be used cross platform, but may introduce inconsistencies or errors in strings.

     - Author: Cadence Holmes 2018

     - check that all media assets exist
     - check that position and animation strings match an enum case

     More thorough, functional tests are performed in UI Testing.
     */
    func testDataSet() {

        // get the real datasource
        let popupEvents = PopupEvents()

        // setup a mirror so we can loop through its properties, which organize popups into collections
        let mirror = Mirror(reflecting: popupEvents)

        // loop through all major collections, which must be dictionaries of dictionaries
        for child in mirror.children {
            let majCol = child.value as? Dictionary<Int, Dictionary<Int, PopupEvent>>
            guard let majorCollections = majCol else { return }

            // loop through each collection of models, which must be dictionaries of PopupEvent()
            for key in majorCollections.keys {
                let minorCollection: Dictionary<Int, PopupEvent> = majorCollections[key]!

                // loop through all models, which must be a PopupEvent()
                for key in minorCollection.keys {
                    let model: PopupEvent = minorCollection[key]!

                    // create an instance of PopupEventPlayer and add it to the view
                    let popup = PopupEventPlayer(delegate: nil, model: model)

                    // test that the popup has the expected strings where they belong
                    XCTAssert(popup.mainLabel.text == model.topText)
                    XCTAssert(popup.subLabel.text == model.botText)

                    // if there should be an image, check that the file exists
                    let imageCheck = (model.imgName != nil) ? (UIImage(named: model.imgName!) != nil) : true
                    XCTAssert(imageCheck)

                    // if there should be a slide-in sound, check that the file exists
                    let slideSoundCheck = (model.slideSound != nil) ? (NSDataAsset(name: model.slideSound!) != nil) : true
                    XCTAssert(slideSoundCheck)

                    // if there should be a badge sound, check that the file exists
                    let badgeSoundCheck = (model.badgeSound != nil) ? (NSDataAsset(name: model.badgeSound!) != nil) : true
                    XCTAssert(badgeSoundCheck)
                }
            }
        }

    }

}
